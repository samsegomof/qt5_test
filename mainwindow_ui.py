# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5 import QtCore, QtWidgets


class UiMainWindow(object):
    """
        Sets up the UI for the main window.

        Args:
            MainWindow (QMainWindow): The main window instance.
    """
    def setupUi(self, MainWindow: QtWidgets.QMainWindow) -> None:
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.directoryListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.directoryListWidget.setGeometry(QtCore.QRect(40, 20, 371, 361))
        self.directoryListWidget.setObjectName("directoryListWidget")
        self.refreshButton = QtWidgets.QPushButton(self.centralwidget)
        self.refreshButton.setGeometry(QtCore.QRect(180, 380, 100, 32))
        self.refreshButton.setObjectName("refreshButton")
        self.pathLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.pathLineEdit.setGeometry(QtCore.QRect(40, 0, 731, 21))
        self.pathLineEdit.setObjectName("pathLineEdit")
        self.fileContentTextEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.fileContentTextEdit.setGeometry(QtCore.QRect(410, 20, 361, 361))
        self.fileContentTextEdit.setObjectName("fileContentTextEdit")
        self.backButton = QtWidgets.QPushButton(self.centralwidget)
        self.backButton.setGeometry(QtCore.QRect(540, 380, 100, 32))
        self.backButton.setObjectName("backButton")
        self.exitButton = QtWidgets.QPushButton(self.centralwidget)
        self.exitButton.setGeometry(QtCore.QRect(360, 470, 100, 32))
        self.exitButton.setObjectName("exitButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        self.menuExplorer = QtWidgets.QMenu(self.menubar)
        self.menuExplorer.setObjectName("menuExplorer")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuExplorer.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect signals and slots
        self.refreshButton.clicked.connect(self.refresh_directory)
        self.directoryListWidget.itemDoubleClicked.connect(self.open_item)
        self.backButton.clicked.connect(self.go_back)
        self.exitButton.clicked.connect(MainWindow.close)

        # Set initial directory
        self.current_directory = os.getcwd()
        self.display_directory(self.current_directory)

    def retranslateUi(self, MainWindow: QtWidgets.QMainWindow) -> None:
        """
            Sets the text for UI elements.

            Args:
                MainWindow (QMainWindow): The main window instance.
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "File Explorer"))
        self.refreshButton.setText(_translate("MainWindow", "Refresh"))
        self.backButton.setText(_translate("MainWindow", "Back"))
        self.exitButton.setText(_translate("MainWindow", "Exit"))
        self.menuExplorer.setTitle(_translate("MainWindow", "Explorer"))

    def display_directory(self, directory: str) -> None:
        """
            Displays the contents of the given directory in the directory list widget.

            Args:
                directory (str): The path of the directory to display.
        """
        self.pathLineEdit.setText(directory)
        self.directoryListWidget.clear()
        for item in os.listdir(directory):
            self.directoryListWidget.addItem(item)

    def refresh_directory(self) -> None:
        """
            Refreshes the directory view based on the path in the path line edit.
        """
        self.display_directory(self.pathLineEdit.text())

    def open_item(self, item: QtWidgets.QListWidgetItem) -> None:
        """
            Opens the selected item. If it is a directory, displays its contents.
            If it is a file, displays its content in the text edit widget.

            Args:
                item (QListWidgetItem): The item that was double-clicked.
        """
        path = os.path.join(self.pathLineEdit.text(), item.text())
        if os.path.isdir(path):
            self.display_directory(path)
        elif os.path.isfile(path):
            with open(path, 'r') as f:
                self.fileContentTextEdit.setPlainText(f.read())

    def go_back(self) -> None:
        """
            Goes back to the parent directory of the current path.
        """
        parent_dir = os.path.dirname(self.pathLineEdit.text())
        if os.path.exists(parent_dir):
            self.display_directory(parent_dir)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = UiMainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
